vite@latest -> to start (in clients side)

cd client -> npm i to install it all router , react

tailwind docs

auto rename tag 

deploy it to github

now we will create pages and routes  (6 pages intotal )
for routes -> router dom 

routes successfully established

to update in github we use source control on vs code
->just click on commit option available there 
1_ click on +
2_ then on arrow and commit and push option

to create header we use flowbite package similar to bootstrap


header successfully added (also comitted to github )

next from we will work on backend work step by step 

from 53 mins
* create and run server


backend should be in the root file out of client 
first npminit -y -> change the type to module (only then these packages will work)
create api folder and then save (index.js) init
we need to install express for backend

to avoid restarting the server when changes are made we use nodemon to autoupdate server 
when changes are made
then change the script to 
 "dev":"nodemon api/index.js",
    "start": "node api/index.js"

to use nodemon npm run dev 

# move gitignore from inside of client to root directory

now connect to database

mongo setup done and connected

create an env file to save the important keys init 
to access key we use process.env.MONGO TO access the key from anywhere

* TO use env npm i"dotenv" ->
next add these
import dotenv from "dotenv";

dotenv.config();
then add .env to gitignore so that it wont be sent 

from 1:13 create a user model for db
api -> model -> user.model.js 

next create a test API router (routes folder to define all the routes) ->> good practice

req,res
->
req : data we send
res : data we get 

in backend always remember to add js while exporting files

next add the functions we regularly use into  a folder called controllers

next section signup api route
* hashing
* sending data to backend -> also saving it 
* .use route -> .post in route -> function available in controllers
* this is using User model we created before
one error handler and middleware created to handle the errors

ctrl + p -> to search for files in vs code


sign up page functionality :
adding a proxy in vite side 
connecting backend and frontend
knowing how controllers Routes and index.js (in API ) work togther

source control isnt working so need to commit from terminal 

next signin page api route

next sign in page functionality 

all working great 
** reason of invalid password is that the first password had no hashing but now we have password hashing 
and we check hashing using compareSync function 



after firebase setup we use 
import.meta.env.VITE_FIREBASE_API_KEY, to access the key from env 



const token = jwt.sign(
  { id: newUser._id, isAdmin: newUser.isAdmin }, // Payload: Data to be included in the token
  process.env.JWT_SECRET // Secret key used to sign the token
);


for webtoken 
Payload: The first parameter passed to jwt.sign() is the payload, which is a JSON object containing the information you want to transmit securely. In this case, it includes the user's ID (newUser._id) and whether the user is an admin (newUser.isAdmin). This payload will be encoded into the token.

Secret Key: The second parameter (process.env.JWT_SECRET) is the secret key used to sign the token. This key is known only to the server, and it is used to generate and verify the token's signature. It's important to keep this secret key secure, as anyone who has access to it can create and tamper with tokens.

now add dark mode to blog


      Redux explained

 // due to this reducer the state is updated
    // This is used in signIn funtion to update the the state and then
    // when the value is set it is used from the redux state
    // and then through the provider this is accessible using redux state 

    signInSuccess: (state, action) => {
      state.currentUser = action.payload;
      state.loading = false;
      state.error = null;
    },

create a confirm popup and if selected delete the account in a confirm manner 


admin functionality (ie basically the cookie ) is already added while setting up most of the controllers
{signup,signin,google auth} -> these controllers 
so no need to add any new file just this note


comments section is used in postpage
final step is to commit